{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"type": "object",
	"additionalProperties": false,
	"description": "The App Spec YAML defines the workloads to run in the Kubernetes cluster as part of your application. It is not exclusive: you can always specify more complex or particular workloads manually via your app's Terraform config.",
	"properties": {
		"image": {
			"$ref": "#/$defs/image"
		},
		"owner": {
			"$ref": "#/$defs/owner"
		},
		"source_repo": {
			"$ref": "#/$defs/source_repo"
		},
		"gcp_project_id": {
			"$ref": "#/$defs/gcp_project_id"
		},
		"env_vars": {
			"$ref": "#/$defs/env_vars"
		},
		"client": {
			"$ref": "#/$defs/client"
		},
		"api": {
			"description": "The API workload to run as part of this application. This API workload is not required. However, it is the only workload in this application that can receive traffic from the public internet via Kubernetes ingress.",
			"allOf": [
				{
					"$ref": "#/$defs/workload"
				},
				{
					"$ref": "#/$defs/public_routes"
				}
			]
		},
		"daemons": {
			"type": "object",
			"description": "Zero or more daemon workloads to run as part of this application. Daemons may or may not have an exposed HTTP port, but they are never exposed to the public internet via Kubernetes ingress.",
			"additionalProperties": {
				"$ref": "#/$defs/workload"
			}
		},
		"cronjobs": {
			"type": "object",
			"description": "Zero or more cronjobs to run as part of this application.",
			"additionalProperties": {
				"$ref": "#/$defs/cronjob"
			}
		}
	},
	"required": ["image", "owner", "source_repo", "gcp_project_id", "client"],
	"examples": [
		{
			"image": "us-east1-docker.pkg.dev/uplight-build/depot/my-app@sha256:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
			"owner": "my-team-name",
			"source_repo": "github.com/Uplight-Inc/my-source-code",
			"gcp_project_id": "my-gcp-project-name",
			"client": "shared",
			"env_vars": {
				"LOG_LEVEL": "info"
			},
			"api": {
				"port": 8080,
				"env_vars": {
					"WORKER_URI": "http://exposed_worker"
				}
			},
			"daemons": {
				"background_worker": {
					"image": "us-east1-docker.pkg.dev/uplight-build/depot/my-worker@sha256:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
					"cpu_min": "0.2",
					"cpu_max": "2",
					"memory_min": "128Mi",
					"memory_max": "2048Mi"
				},
				"exposed_worker": {
					"image": "us-east1-docker.pkg.dev/uplight-build/depot/my-other-worker@sha256:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
					"source_repo": "github.com/Uplight-Inc/my-other-worker",
					"port": 8888,
					"env_vars": {
						"AWS_ACCESS_KEY_ID": "SOME_CREDENTIAL_ID"
					}
				}
			},
			"cronjobs": {
				"nightly_cleanup": {
					"image": "us-east1-docker.pkg.dev/uplight-build/depot/my-scripts@sha256:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
					"schedule": "0 0 * * *",
					"command": ["/app/scripts/cleanup"]
				}
			},
			"public_routes": {
				"tenant-stats": {
					"internal": "/api/v1/util/tenant/stats",
					"external": "/api/v1/tenant-stats",
					"permissions": {
						"read": ["basic", "advanced", "premium"],
						"update": ["advanced", "premium"],
						"delete": ["premium"]
					}
				},
				"device-enroll": {
					"internal": "/api/v1/device/lifetime",
					"external": "/api/v1/enroll",
					"permissions": {
						"read": ["premium"]
					}
				}
			}
		}
	],
	"$defs": {
		"image": {
			"type": "string",
			"description": "The name of a Docker image (with tag) to use for the workload(s). Can be prefixed with a custom registry, as long as that registry is accessible to Uplight's Terraform deployment process. It's OK to use image paths that point to Uplight GCP Artifact Registry.",
			"examples": [
				"stefanprodan/podinfo:6.1.4",
				"redis:7",
				"us-east1-docker.pkg.dev/uplight-build/depot/up-platform-demo-app:7d13f31"
			]
		},
		"owner": {
			"type": "string",
			"description": "The Owner of the entire workload that will tell other engineers who to communicate with for any issues/concerns with the applications encompassing the spec.",
			"examples": ["release-engineering", "sre", "apiary"]
		},
		"source_repo": {
			"type": "string",
			"description": "The Github source URL. Used to describe CircleCI integrations with other services as well as providing a smart-link directly to the applications source code.",
			"examples": [
				"github.com/Uplight-Inc/up-platform-demo-app",
				"github.com/Uplight-Inc/up-platform",
				"github.com/Uplight-Inc/up-platform-connector"
			]
		},
		"gcp_project_id": {
			"type": "string",
			"description": "The GCP Project name without the suffix present. The platform will search for the correct project according to the environment selected.",
			"examples": ["platform-utility", "platform", "uplight-build"]
		},
		"client": {
			"type": "string",
			"description": "The client to which the costs associated with this project should be associated. In most cases this will be shared unless the project is a specific ask from a single client.",
			"examples": ["shared"]
		},
		"env_vars": {
			"type": "object",
			"description": "Environment variables that will be set on the workload's Kubernetes Deployment.",
			"examples": [
				{
					"AWS_ACCESS_KEY_ID": "some-big-long-access-key",
					"ENABLE_CACHE_VIA_REDIS": "1",
					"REDIS_URI": "redis://my-namespace-local-redis-instance:6379",
					"FEAT_MY_BETA_FEATURE": "true"
				}
			]
		},
		"workload": {
			"type": "object",
			"description": "A workload.",
			"properties": {
				"image": {
					"$ref": "#/$defs/image"
				},
				"source_repo": {
					"$ref": "#/$defs/source_repo"
				},
				"gcp_project_id": {
					"$ref": "#/$defs/gcp_project_id"
				},
				"client": {
					"$ref": "#/$defs/client"
				},
				"env_vars": {
					"$ref": "#/$defs/env_vars"
				},
				"port": {
					"type": "integer",
					"description": "The port on which this workload is listening for HTTP requests. If this is omitted, we will not create a Kubernetes Service for this workload.",
					"default": "8080",
					"examples": ["8000", "9443", "5432"]
				},
				"protocol": {
					"type": "string",
					"description": "The protocol on which this workload is listening on.",
					"default": "http",
					"examples": ["http", "grpc"]
				},
				"cpu_min": {
					"type": "string",
					"description": "The minimum amount of CPU resources that will always be available to this app. See [Kubernetes: Meaning of CPU](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu).",
					"default": "0.1",
					"examples": ["100m", "0.05"]
				},
				"cpu_max": {
					"type": "string",
					"description": "The maximum amount of CPU resources that this app will be allowed to use. See [Kubernetes: Meaning of CPU](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu).",
					"default": "1",
					"examples": ["1.0", "1000m"]
				},
				"memory_min": {
					"type": "string",
					"description": "The minimum amount of memory resources that will always be available to this app. See [Kubernetes: Meaning of Memory](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory).",
					"default": "64Mi",
					"examples": [
						"128974848",
						"129e6",
						"129M",
						"128974848000m",
						"123Mi"
					]
				},
				"memory_max": {
					"type": "string",
					"description": "The maximum amount of memory resources that this app will be allowed to use. See [Kubernetes: Meaning of Memory](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory).",
					"default": "256Mi",
					"examples": [
						"128974848",
						"129e6",
						"129M",
						"128974848000m",
						"123Mi"
					]
				},
				"liveness_probe": {
					"type": "object",
					"additionalProperties": false,
					"description": "A Kubernetes probe that will be used to determine whether the workload is alive or deadlocked. See [Kubernetes: Liveness and Readiness Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).",
					"properties": {
						"enabled": {
							"type": "boolean",
							"description": "Whether to enable the liveness probe. If disabled, Kubernetes assumes the app is alive as soon as the process starts without crashing.",
							"default": true
						},
						"path": {
							"type": "string",
							"description": "The HTTP path to the app's liveness probe endpoint.",
							"default": "/.uplight/livez"
						}
					},
					"required": ["enabled", "path"]
				},
				"readiness_probe": {
					"type": "object",
					"additionalProperties": false,
					"description": "A Kubernetes probe that will be used to determine whether the workload is ready to serve traffic. See [Kubernetes: Liveness and Readiness Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).",
					"properties": {
						"enabled": {
							"type": "boolean",
							"description": "Whether to enable the readiness probe. If disabled, Kubernetes assumes the app is ready as soon as the process starts without crashing.",
							"default": true
						},
						"path": {
							"type": "string",
							"description": "The HTTP path to the app's readiness probe endpoint.",
							"default": "/.uplight/readyz"
						}
					},
					"required": ["enabled", "path"]
				},
				"autoscale": {
					"type": "object",
					"additionalProperties": false,
					"description": "Configure optional autoscaling for a workload. See [Kubernetes: Horizontal Pod Autoscaling](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/).\n\nIf the `autoscale` key is omitted entirely, autoscaling will be disabled.",
					"properties": {
						"min": {
							"type": "integer",
							"description": "The minimum number of instances to run for this workload.",
							"default": 1
						},
						"max": {
							"type": "integer",
							"description": "The maximum number of instances to run for this workload."
						},
						"source": {
							"type": "string",
							"description": "The resource which the autoscaler uses to determine whether the right number of instances are running.",
							"enum": ["cpu"],
							"default": "cpu"
						},
						"target": {
							"type": "integer",
							"description": "The target percentage of the `basis` resource that the autoscaler will attempt to maintain.",
							"default": 80
						}
					},
					"required": ["max"],
					"default": {
						"enabled": false
					},
					"examples": [
						{
							"min": 3,
							"max": 32,
							"source": "cpu",
							"target": 80
						}
					]
				}
			}
		},
		"cronjob": {
			"type": "object",
			"additionalProperties": false,
			"description": "A cronjob is a recurring job that runs on a schedule.",
			"properties": {
				"image": {
					"$ref": "#/$defs/image"
				},
				"command": {
					"type": "array",
					"description": "The command to run in the container.",
					"examples": [
						["/bin/bash", "-c", "echo 'Hello, world!'"],
						[
							"curl",
							"-X",
							"POST",
							"https://example.com/start-nightly-cleanup"
						]
					]
				},
				"schedule": {
					"type": "string",
					"description": "The schedule for this cron job. See the [Kubernetes cron schedule syntax](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax) for more information.",
					"examples": ["0 0 * * *", "*/4 0 * * *", "0 0 * * 5"]
				},
				"backoff_limit": {
					"type": "integer",
					"description": "The number of times to attempt to run the cronjob before giving up.",
					"default": 3
				}
			}
		},
		"public_routes": {
			"type": "object",
			"description": "Routes to be exposed to authenticated external clients, along with the granular permissions granted to each client for roles operations on specified routes.",
			"properties": {
				"public_routes": {
					"additionalProperties": {
						"$ref": "#/$defs/route_mapping"
					}
				}
			}
		},
		"route_mapping": {
			"type": "object",
			"description": "Mappings of external routes to internal routes. Combined with the `permissions` key, this grants external clients authenticated access to internal routes. Internal paths are prefixes, and external paths will be rewritten to look as if they were internal paths.",
			"properties": {
				"internal": {
					"type": "string",
					"description": "The internal path **prefix** to be accessed inside the app.",
					"pattern": "^/",
					"examples": ["/", "/api/v1/external"]
				},
				"external": {
					"type": "string",
					"description": "The path on the external-facing load balancer that a client will use to access the app's internal path.",
					"pattern": "^/",
					"examples": ["/my-app", "/my-app/api/v1"]
				},
				"permissions": {
					"description": "Permissions to grant based on RBAC and CRUD.",
					"$ref": "#/$defs/permissions"
				}
			},
			"required": ["internal", "external", "permissions"]
		},
		"permissions": {
			"type": "object",
			"additionalProperties": false,
			"description": "The permissions and roles to grant on the defined external route.",
			"properties": {
				"create": {
					"description": "Create access based on HTTP method/s:\n* POST",
					"$ref": "#/$defs/roles"
				},
				"read": {
					"description": "Create access based on HTTP method/s:\n* GET\n* HEAD",
					"$ref": "#/$defs/roles"
				},
				"update": {
					"description": "Update access based on HTTP method/s:\n* PUT",
					"$ref": "#/$defs/roles"
				},
				"delete": {
					"description": "Delete access based on HTTP method/s:\n* DELETE",
					"$ref": "#/$defs/roles"
				}
			},
			"anyOf": [
				{
					"required": ["create"]
				},
				{
					"required": ["read"]
				},
				{
					"required": ["update"]
				},
				{
					"required": ["delete"]
				},
				{
					"required": []
				}
			]
		},
		"roles": {
			"type": "array",
			"additionalProperties": false,
			"description": "A list of roles defined by the business that will be added onto the permission, this role will be used to clearly define what access a client will have.",
			"items": {
				"pattern": "^(basic|advanced|premium|evergy-connect|rer-update-request)$",
				"type": "string"
			},
			"minItems": 1
		}
	}
}
